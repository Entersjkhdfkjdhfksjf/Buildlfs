# extra function for pkgmk

if [ "$PKGMK_ARCH" = 32 ]; then
	export PKG_CONFIG_LIBDIR="/usr/lib32/pkgconfig"	
	export CC="${CC:-gcc} -m32"
	export CXX="${CXX:-g++} -m32"
fi

# override stupid function in pkgmk
build_needed() {
	if [ -f "$TARGET" ]; then
		echo no
	else
		echo yes
	fi
}

detect_buildtype() {
	if [ -f meson.build ]; then
		buildtype=meson_build
	elif [ -f configure ]; then
		buildtype=configure_build
	elif [ -f CMakeLists.txt ]; then
		buildtype=cmake_build
	elif [ -f setup.py ]; then
		buildtype=python3_build
	elif [ -f Makefile.PL ]; then
		buildtype=perlmodule_build
	elif [ -f Makefile ]; then
		buildtype=makefile_build
	else
		echo "failed to detect buildtype"
		exit 1
	fi
}

_makefile_build() {
	make || return $?
	make \
		PREFIX=/usr \
		prefix=/usr \
		SYSCONFDIR=/etc \
		sysconfdir=/etc \
		MANDIR=/usr/share/man \
		mandir=/usr/share/man \
		$([ "$PKGMK_ARCH" = 32 ] && echo LIBDIR=/usr/lib32 PKGCONFIGDIR=/usr/lib32/pkgconfig) \
		DESTDIR=$PKG install || return $?
}

_perlmodule_build() {
	perl Makefile.PL || return $?
	make || return $?
	make DESTDIR=$PKG install || return $?
}

_cmake_build() {
	mkdir -p cmakebuild
	cd cmakebuild
	cmake -DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_SYSCONFDIR=/etc \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DCMAKE_INSTALL_LIBEXECDIR=lib \
		-DCMAKE_BUILD_TYPE=Release \
		-DFETCHCONTENT_FULLY_DISCONNECTED=ON \
		-DCMAKE_C_FLAGS_RELEASE="$CFLAGS" \
		-DCMAKE_CXX_FLAGS_RELEASE="$CXXFLAGS" \
		$build_opt  $@ \
		-G Ninja .. || return $?
	if [ -f build.ninja ]; then
		ninja || return $?
		DESTDIR=$PKG ninja install || return $?
	else
		cmake --build build || return $?
		DESTDIR=$PKG cmake --install build || return $?
	fi
}

_python3_build() {
	python3 setup.py build || return $?
	python3 setup.py install --prefix=/usr --root=$PKG --optimize=1 || return $?
}

_configure_build() {
	if [ "$BOOTSTRAP" ]; then
		./configure --prefix=$TOOLS $build_opt $@ || return $?
		make || return $?
		make install || return $?
	else
		./configure \
			--prefix=/usr \
			--sysconfdir=/etc \
			--libexecdir=/usr/lib \
			--localstatedir=/var \
			--mandir=/usr/share/man \
			$([ "$PKGMK_ARCH" = 32 ] && echo --libdir=/usr/lib32) \
			$build_opt $@ || return $?
		make || return $?
		make DESTDIR=$PKG install || return $?
	fi
}

_meson_build() {
	meson setup _meson_build \
		--prefix=/usr \
		--libdir=/usr/lib$([ "$PKGMK_ARCH" = 32 ] && echo 32) \
		--libexecdir=/usr/lib \
		--bindir=/usr/bin \
		--sbindir=/usr/sbin \
		--includedir=/usr/include \
		--datadir=/usr/share \
		--mandir=/usr/share/man \
		--infodir=/usr/share/info \
		--localedir=/usr/share/locale \
		--sysconfdir=/etc \
		--localstatedir=/var \
		--sharedstatedir=/var/lib \
		--buildtype=plain \
		--auto-features=auto \
		--wrap-mode=nodownload \
		-Db_lto=true \
		-Db_pie=true \
		-Db_thinlto_cache=true \
		$build_opt || return $?
	meson compile -C _meson_build || return $?
	DESTDIR=$PKG meson install --no-rebuild -C _meson_build || return $?
}

_patch() {
	[ "$PKGMK_AUTO_PATCH" = no ] && return 0
	for i in ${source[@]}; do
		case $i in
			*.patch|*.diff) 
				echo "patch: $i"
				patch ${patch_opt:--p1} -i $SRC/$i;;
		esac
	done
}

build() {
	export DESTDIR=$PKG
	export DEST_DIR=$PKG     # p7zip
	export INSTALLROOT=$PKG  # syslinux
	export install_root=$PKG # glibc
	export INSTALL_ROOT=$PKG # qt5

	# detect extracted source directory name
	for s in ${source[@]}; do
		case $s in
			*.tar.*|*.tgz) srcdir=$(tar -tf $PKGMK_SOURCE_DIR/${s##*/} | cut -d / -f1 | head -n1);;
		esac
		break
	done
	# cd into extracted source directory
	if [ "$srcdir" ] && [ -d "$srcdir" ]; then
		cd $srcdir
	fi
	_patch
	if [ "$(command -v pkg_build)" ]; then
		# run pkg_build inside Pkgfile if function exist, then ignore pre_build and post_build
		pkg_build
	else
		if [ "$(command -v pre_build)" ]; then
			pre_build
		fi
		if [ ! "$buildtype" ]; then
			detect_buildtype
		fi
		if [ "$PKGMK_ARCH" = 32 ]; then
			mv $PKG $PKG-32
			mkdir -p $PKG
		fi
		# run build
		_$buildtype $@ #|| return $?
		# if 32bit pkg, keep only /usr/lib32 before post_build
		if [ "$PKGMK_ARCH" = 32 ]; then
			mkdir -p $PKG-32/usr/lib32
			mv $PKG/usr/lib32/* $PKG-32/usr/lib32
			mv $PKG $PKG-old
			mv $PKG-32 $PKG
		fi
		
		if [ "$(command -v post_build)" ]; then
			post_build
		fi
	fi
	
	# info dir
	if [ -d $PKG/usr/share/info ]; then
		find $PKG/usr/share/info -type f | while read -r file; do
			case $file in
				*/dir) continue;;
			esac
			if [ "$file" = "${file%%.gz}" ]; then
				gzip -9 -f "$file"
			fi
		done
	fi
	
	# runit service
	for s in ${sv[@]}; do
		[ -f $SRC/$s ] || exit 1
		case $s in
			     run) install -Dm755 $SRC/$s $PKG/etc/sv/$name/run
			          ln -s /run/runit/supervise.$name $PKG/etc/sv/$name/supervise;;
			  finish) install -Dm755 $SRC/$s $PKG/etc/sv/$name/finish;;
			   *.run) install -Dm755 $SRC/$s $PKG/etc/sv/${s%.*}/run
			          ln -s /run/runit/supervise.${s%.*} $PKG/etc/sv/${s%.*}/supervise;;
			*.finish) install -Dm755 $SRC/$s $PKG/etc/sv/${s%.*}/finish;;
			     *.*) install -Dm644 $SRC/$s $PKG/etc/sv/${s%%.*}/${s#*.};;
			       *) install -Dm644 $SRC/$s $PKG/etc/sv/$name/$s;;
		esac
	done
}
